@using BlazorDownloadFile
@using CardStudyBlazor.Domain
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Newtonsoft.Json
@using CardStudyBlazor.Domain.Models
@using CardStudyBlazor.Domain.Services

<div>
    <div class="flex my-auto">
        <div><h2 class="text-2xl">Categories</h2></div>
    </div>
    <div class="m-2">
        <div @onkeydown="EnterSubmitAsync" class="w-full">
            <label for="inpTitle" class="w-1/5">Enter Category name:</label>
            <input class="w-1/5" name="inpTitle" @ref="@inpName"
                   autofocus
                   type="text"
                   disabled="@busy"
                   @bind="newName"
                   @bind:event="oninput" />
            <label for="inpDescription">Enter description:</label>
            <input class="w-1/5" name="inpDescription" @ref="@inpDescription"
                   type="text"
                   disabled="@busy"
                   @bind="newDescription"
                   @bind:event="oninput" />
            <button class="disabled:bg-green-100 disabled:cursor-not-allowed px-3 py-2 w-48 cursor-pointer rounded-2xl bg-green-200 hover:bg-green-400 shadow-md text-center" @onclick="@(async ()=> await AddCategoryAsync())"
                    disabled="@(busy || string.IsNullOrWhiteSpace(newName)|| string.IsNullOrWhiteSpace(newDescription))">
                Add Category
            </button>
        </div>
    </div>
    <div class="items-end">
        <label>Search</label>
        <input type="search" @bind="SearchText" @bind:event="oninput" />
    </div>
    @if (categories.Length > 0)
    {
        <div class="m-2 flex flex-col">
            <div class="overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="py-2 inline-block min-w-full sm:px-6 lg:px-8">
                    <div class="overflow-hidden">
                        <table class="min-w-full">
                            <thead class="border-b">
                                <tr>
                                    <th scope="col" class="text-sm font-medium text-gray-900 px-6 py-4 text-left">Id</th>
                                    <th scope="col" class="text-sm font-medium text-gray-900 px-6 py-4 text-left">Name</th>
                                    <th scope="col" class="text-sm font-medium text-gray-900 px-6 py-4 text-left">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize Items="@filteredCategories" Context="category">
                                    <tr class="border-b">
                                        <CategoryComponent @key="@category.Id" Item="@category" />
                                    </tr>
                                </Virtualize>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference inpName;
    private ElementReference inpDescription;
    private string newName = string.Empty;
    private string newDescription = string.Empty;
    public string searchText = string.Empty;
    public string SearchText
    {
        get => searchText;
        set
        {
            if (searchText == value)
            {
                return;
            }
            searchText = value;
            StateHasChanged();
        }
    }
    private bool busy = false;
    private Category[] categories = Array.Empty<Category>();
    private Category[] filteredCategories => this.categories.Where((item) => string.IsNullOrEmpty(searchText) || item.Name.ToLowerInvariant().Contains(searchText.ToLowerInvariant()) || item.Description?.ToLowerInvariant().Contains(searchText.ToLowerInvariant()) == true).OrderByDescending(item => item.Name.ToLowerInvariant() == searchText.ToLowerInvariant() || item.Description?.ToLowerInvariant() == searchText.ToLowerInvariant()).ThenByDescending(item => item.Id).ToArray();
    protected override async Task OnInitializedAsync()
    {
        await RefreshUiAsync();
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefreshUiAsync()
    {
        busy = true;
        categories = await Service.GetCategoriesAsync();
        busy = false;
        StateHasChanged();
    }

    public async void EnterSubmitAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await AddCategoryAsync();
        }
    }

    private async Task AddCategoryAsync()
    {
        if (!string.IsNullOrWhiteSpace(newName) && !string.IsNullOrWhiteSpace(newDescription) && !categories.Any((item) => item.Name.Equals(newName, StringComparison.OrdinalIgnoreCase)))
        {
            busy = true;
            await Service.AddCategoryAsync(newName, newDescription);
            busy = false;
            newName = newDescription = string.Empty;
            await RefreshUiAsync();
            await inpName.FocusAsync();
        }
    }
}